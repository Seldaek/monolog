Monolog - Logging for PHP 5.3
=============================

Usage
-----

    use Monolog\Logger;
    use Monolog\Handler\StreamHandler;

    // create a log channel
    $log = new Logger('name');
    $log->pushHandler(new StreamHandler('path/to/your.log', Logger::WARNING));

    // add records to the log
    $log->addWarning('Foo');
    $log->addError('Bar');

Core Concepts
-------------

Every Logger instance has a channel (name) and a stack of handlers. Whenever you add a record to the logger, it traverses the handler stack. Each handler decides whether it handled fully the record, and if so, the propagation of the record ends there.

This allow for flexible logging setups, for example having a FileHandler at the bottom of the stack that will log anything to disk, and on top of that add a MailHandler that will send emails only when an error message is logged. Handlers also have a bubbling property which define whether they block the record or not if they handled it. In this example, setting the MailHandler's $bubble argument to true means that all records will propagate to the FileHandler, even the errors that are handled by the MailHandler.

You can create many Loggers, each defining a channel (e.g.: db, request, router, ..) and each of them combining various handlers, which can be shared or not. The channel is reflected in the logs and allows you to easily see or filter records.

Each Handler also has a Formatter, a default one with settings that make sense will be created if you don't set one. The formatters normalize and format incoming records so that they can be used by the handlers to output useful information.

Custom severity levels are not available. Only six levels (debug, info, warning, error, critical, alert) are present for basic filtering purposes, but for sorting and other use cases that would require flexibility, you should add Processors to the Logger that can add extra information (tags, user ip, ..) to the records before they are handled.

Docs
====

Handlers
--------

- _StreamHandler_: Logs records into any php stream, use this for log files.
- _RotatingFileHandler_: Logs records to a file and creates one logfile per day. It will also delete files older than $maxFiles. You should use [logrotate](http://linuxcommand.org/man_pages/logrotate8.html) for high profile setups though, this is just meant as a quick and dirty solution.
- _FirePHPHandler_: Handler for logging simple _strings_ to a browser console ([FireBug](http://getfirebug.com/) + [FirePHP Extension](http://www.firephp.org/) or [DeveloperCompanion](http://developercompanion.com/)) using the [firephp/wildfire header protocol](http://www.firephp.org/Wiki/Reference/Protocol).
- _InsightHandler_: Handler for logging _objects_ and _detailed intelligence data_ to a browser tool that supports the [Insight Intelligence System](http://www.christophdorn.com/Research/#insight). [DeveloperCompanion](http://developercompanion.com/) is the most advanced supporting client at this time while [FireBug](http://getfirebug.com/) + [FirePHP Extension](http://www.firephp.org/) provide logging to a single console. **NOTE: To use this handler the [FirePHP 1.0](http://reference.developercompanion.com/#/Tools/FirePHPCompanion/Introduction/) library must also be installed (see below).**
- _NativeMailHandler_: Sends emails using PHP's mail() function.
- _SwiftMailerHandler_: Sends emails using a SwiftMailer instance.
- _SyslogHandler_: Logs records to the syslog.

Wrappers / Special Handlers
---------------------------

- _FingersCrossedHandler_: A very interesting wrapper. It takes a logger as parameter and will accumulate log records of all levels until a record exceeds the defined severity level. At which point it delivers all records, including those of lower severity, to the handler it wraps. This means that until an error actually happens you will not see anything in your logs, but when it happens you will have the full information, including debug and info records. This provides you with all the information you need, but only when you need it.
- _NullHandler_: Any record it can handle will be thrown away. This can be used to put on top of an existing handler stack to disable it temporarily.
- _BufferHandler_: This handler will buffer all the log records it receives until close() is called at which point it will call handleBatch() on the handler it wraps with all the log messages at once. This is very useful to send an email with all records at once for example instead of having one mail for every log record.
- _GroupHandler_: This handler groups other handlers. Every record received is sent to all the handlers it is configured with.
- _TestHandler_: Used for testing, it records everything that is sent to it and has accessors to read out the information.

Formatters
----------

- _LineFormatter_: Formats a log record into a one-line string.
- _JsonFormatter_: Encodes a log record into json.
- _WildfireFormatter_: Used to format log records into the Wildfire/FirePHP protocol, only useful for the FirePHPHandler.

Processors
----------

- _WebProcessor_: Adds the current request URI, request method and client IP to a log record.

Logging with the _InsightHandler_
---------------------------------

Required: [FirePHP 1.0](http://reference.developercompanion.com/#/Tools/FirePHPCompanion/Install/) on server and Firefox on client.

To use FirePHP 1.0 configure and load it (See [here](http://reference.developercompanion.com/#/Tools/FirePHPCompanion/Install/) or use the [DeveloperCompanion](http://developercompanion.com/) _New Workspace_ wizard):

    define('INSIGHT_IPS', '*');       // <- CHANGE THIS
    define('INSIGHT_AUTHKEYS', '*');  // <- CHANGE THIS
    define('INSIGHT_PATHS', dirname(__DIR__));
    define('INSIGHT_SERVER_PATH', '/');
    require_once('phar://firephp.phar/FirePHP/Init.php');

Install [DeveloperCompanion](http://developercompanion.com/) or [FireBug](http://getfirebug.com/) + [FirePHP Extension](http://www.firephp.org/).

Configure `InsightHandler`:

    // Log to the 'page' context. i.e. DeveloperCompanion Console or Firebug Console
    $log->pushHandler(new InsightHandler(array(
        'to' => 'page'      // default
    )));

    // Log to the 'request' context. i.e. DeveloperCompanion Window
    $log->pushHandler(new InsightHandler(array(
        'to' => 'request',
        'console' => 'Monolog Console'  // title for console
    )));
    // TIP: Open the workspace for your application in DeveloperCompanion to see requests
    // TIP: When logging to the request context you can set up multiple loggers
    //      that target differently titled consoles.

    // See Insight API at http://reference.developercompanion.com/#/Tools/FirePHPCompanion/API/
    InsightHandler::to('page')->console()->log('Hello World');

For support using the `InsightHandler` see: [http://groups.google.com/group/firephp-dev](http://groups.google.com/group/firephp-dev)


About
=====

Requirements
------------

Any flavor of PHP 5.3 should do

Submitting bugs and feature requests
------------------------------------

Bugs and feature request are tracked on [Github](https://github.com/Seldaek/monolog/issues)

Author
------

Jordi Boggiano - <j.boggiano@seld.be> - <http://twitter.com/seldaek><br />
See also the list of [contributors](https://github.com/Seldaek/monolog/contributors) which participated in this project.

License
-------

Monolog is licensed under the MIT License - see the LICENSE file for details

Acknowledgements
----------------

This library is heavily inspired by Python's [Logbook](http://packages.python.org/Logbook/) library, although most concepts have been adjusted to fit in the PHP world.
